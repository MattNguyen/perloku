#!/bin/sh
#!/usr/bin/env bash

indent() {
  sed -u 's/^/       /'
}

set -e            # fail fast
# set -x          # enable debugging

#### PERL STUFF
BUILD_DIR=$1
CACHE_DIR=$2

PERL_VERSION="5.18.1"
PERL_PACKAGE="perloku.s3.amazonaws.com/perl-$PERL_VERSION.tgz"

VENDORED_PERL="$BUILD_DIR/vendor/perl"

echo "-----> Vendoring Perl"

mkdir -p $VENDORED_PERL  && curl $PERL_PACKAGE -s -o -  | tar xzf - -C $VENDORED_PERL

# Set up so we can use Perl right away
export PATH="$VENDORED_PERL/bin:$PATH"
export PERL5LIB="$VENDORED_PERL/lib/$PERL_VERSION:$VENDORED_PERL/lib/site_perl/$PERL_VERSION"

echo "Using Perl $PERL_VERSION" | indent

if [ -f $BUILD_DIR/Makefile.PL ] || [ -f $BUILD_DIR/cpanfile ]; then
  echo "-----> Installing dependencies"
  VENDOR_DEPS="$BUILD_DIR/vendor/perl-deps"
  CACHE_DEPS="$CACHE_DIR/$PERL_VERSION/perl-deps"
  CPANM="perl -S $(which cpanm) -l $CACHE_DEPS"

  mkdir -p "$CACHE_DIR"
  $CPANM --notest --installdeps "$BUILD_DIR" 2>&1 | indent

  cp -R "$CACHE_DEPS" "$VENDOR_DEPS"

  echo "Dependencies installed" | indent
fi

#### Grunt and Bower stuff
# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

error() {
  echo " !     $*" >&2
  exit 1
}

status() {
  echo "-----> $*"
}

protip() {
  echo
  echo "PRO TIP: $*" | indent
  echo "See https://devcenter.heroku.com/articles/nodejs-support" | indent
  echo
}

# sed -l basically makes sed replace and buffer through stdin to stdout
# so you get updates while the command runs and dont wait for the end
# e.g. npm install | indent
indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";; # mac/bsd sed: -l buffers on line boundaries
    *)      sed -u "$c";; # unix/gnu sed: -u unbuffered (arbitrary) chunks of data
  esac
}

cat_npm_debug_log() {
  test -f $build_dir/npm-debug.log && cat $build_dir/npm-debug.log
}

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

node_version="0.10.28"

status "Defaulting to latest stable node: $node_version"

# Download node from Heroku's S3 mirror of nodejs.org/dist
status "Downloading and installing node"
node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $build_dir

# Move node (and npm) into ./vendor and make them executable
mkdir -p $build_dir/vendor
mv $build_dir/node-v$node_version-linux-x64 $build_dir/vendor/node
chmod +x $build_dir/vendor/node/bin/*
PATH=$PATH:$build_dir/vendor/node/bin

# Run subsequent node/npm commands from the build path
cd $build_dir

# If node_modules directory is checked into source control then
# rebuild any native deps. Otherwise, restore from the build cache.
if test -d $build_dir/node_modules; then
  status "Found existing node_modules directory; skipping cache"
  status "Rebuilding any native dependencies"
  npm rebuild 2>&1 | indent
elif test -d $cache_dir/node/node_modules; then
  status "Restoring node_modules directory from cache"
  cp -r $cache_dir/node/node_modules $build_dir/

  status "Pruning cached dependencies not specified in package.json"
  npm prune 2>&1 | indent

  if test -f $cache_dir/node/.heroku/node-version && [ $(cat $cache_dir/node/.heroku/node-version) != "$node_version" ]; then
    status "Node version changed since last build; rebuilding dependencies"
    npm rebuild 2>&1 | indent
  fi

fi

# Handle npm's new cert bug
# http://blog.npmjs.org/post/78085451721/npms-self-signed-certificate-is-no-more
if [ ! -f "$build_dir/.npmrc" ]; then
  status "Writing a custom .npmrc to circumvent npm bugs"
  echo "ca=" > "$build_dir/.npmrc"
fi

# Scope config var availability only to `npm install`
(
  if [ -d "$env_dir" ]; then
    status "Exporting config vars to environment"
    export_env_dir $env_dir
  fi

  status "Installing dependencies"
  # Make npm output to STDOUT instead of its default STDERR
  npm install --userconfig $build_dir/.npmrc --production 2>&1 | indent
)

# Persist goodies like node-version in the slug
mkdir -p $build_dir/.heroku

# Save resolved node version in the slug for later reference
echo $node_version > $build_dir/.heroku/node-version

# Purge node-related cached content, being careful not to purge the top-level
# cache, for the sake of heroku-buildpack-multi apps.
rm -rf $cache_dir/node_modules # (for apps still on the older caching strategy)
rm -rf $cache_dir/node
mkdir -p $cache_dir/node

# If app has a node_modules directory, cache it.
if test -d $build_dir/node_modules; then
  status "Caching node_modules directory for future builds"
  cp -r $build_dir/node_modules $cache_dir/node
fi

# Copy goodies to the cache
cp -r $build_dir/.heroku $cache_dir/node

status "Cleaning up node-gyp and npm artifacts"
rm -rf "$build_dir/.node-gyp"
rm -rf "$build_dir/.npm"

 #If Procfile is absent, try to create one using `npm start`
#if [ ! -e $build_dir/Procfile ]; then
  #npm_start=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .scripts.start)

   #If `scripts.start` is set in package.json, or a server.js file
   #is present in the app root, then create a default Procfile
  #if [ "$npm_start" != "null" ] || [ -f $build_dir/server.js ]; then
    #status "No Procfile found; Adding npm start to new Procfile"
    #echo "web: npm start" > $build_dir/Procfile
  #else
    #status "Procfile not found and npm start script is undefined"
    #protip "Create a Procfile or specify a start script in package.json"
  #fi
#fi

# Update the PATH
status "Building runtime environment"
mkdir -p $build_dir/.profile.d
echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $build_dir/.profile.d/nodejs.sh

# Check and run Grunt
(
  if [ -f $build_dir/grunt.js ] || [ -f $build_dir/Gruntfile.js ] || [ -f $build_dir/Gruntfile.coffee ]; then
    # get the env vars
    if [ -d "$env_dir" ]; then
      status "Exporting config vars to environment"
      export_env_dir $env_dir
    fi

    # make sure that grunt and grunt-cli are installed locally
    npm install grunt-cli
    npm install
    echo "-----> Found Gruntfile, running grunt heroku task"
    $build_dir/node_modules/.bin/grunt heroku
  else
    echo "-----> No Gruntfile (grunt.js, Gruntfile.js, Gruntfile.coffee) found"
  fi
)
